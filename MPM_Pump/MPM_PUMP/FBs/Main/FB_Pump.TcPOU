<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.12">
  <POU Name="FB_Pump" Id="{0fa90de2-8e52-41d8-b4ec-9a5ee81c648f}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK FB_Pump EXTENDS FB_ConfigBase
VAR_INPUT
END_VAR
VAR_OUTPUT
	fbEventEnable : FB_DiscreteEvents(THIS,3,0,0);	
	fbEventHomePump : FB_DiscreteEvents(THIS,4,0,0);	
	fbEventMoveAbs : FB_DiscreteEvents(THIS,5,ADR(mcMoveAbs),SIZEOF(mcMoveAbs));	
	fbEventMoveHalt : FB_DiscreteEvents(THIS,6,0,0);			
	fbEventPumpContinuous : FB_DiscreteEvents(THIS,7,0,0);			
	fbEventPumpInterminate : FB_DiscreteEvents(THIS,8,0,0);		
END_VAR
VAR
	axis : Tc2_MC2.AXIS_REF;		
	var1 : DINT;
	var2 : STRING;
	ioVar : POINTER TO BOOL;
	ioVar2 : POINTER TO REAL;
	fbAxisControl : FB_AxisControl(axis);
END_VAR

VAR
	testIO : BOOL;
	closeFeedBack : BOOL;
	openFeedBack : BOOL;
END_VAR


VAR
	mcMoveAbs : ARRAY [0..4] OF MPM_JsonParser.ST_AnyType_User := [
	(name := 'Position', typeclass := MPM_JsonParser.E_TypeClassEx.TYPE_LREAL, diSize := SIZEOF(LREAL)),
	(name := 'Velocity', typeclass := MPM_JsonParser.E_TypeClassEx.TYPE_LREAL, diSize := SIZEOF(LREAL)),	
	(name := 'Acceleration', typeclass := MPM_JsonParser.E_TypeClassEx.TYPE_LREAL, diSize := SIZEOF(LREAL)),
	(name := 'Deceleration', typeclass := MPM_JsonParser.E_TypeClassEx.TYPE_LREAL, diSize := SIZEOF(LREAL)),	
	(name := 'Jerk', typeclass := MPM_JsonParser.E_TypeClassEx.TYPE_LREAL, diSize := SIZEOF(LREAL))	
	];		
END_VAR

//axis
VAR
	stAxisParameterSet : Tc2_MC2.ST_AxisParameterSet;  
END_VAR
//IO

VAR
	//Recipe tags
	//Intermient Move
	volume : LREAL := 100; // this will set number of revs
	timeToDispense : LREAL := 10; //time to dispence 
	//Continous mode
	volumePerSecond : LREAL;
	highLevelOverride : LREAL;
	lowLevelOverride : LREAL;
	//System tags
	volumePerRotation : LREAL; //0.23 liters for pump
	//IO
	lowLevelSensor : BOOL;
	HighLevelSensor : BOOL;
	
	fbKinenmatics2 : FB_Kinenmatics_V2;	
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[]]></ST>
    </Implementation>
    <Folder Name="Events" Id="{6db3c611-ab91-42ac-8c3a-67fe89fe2804}" />
    <Method Name="_F_Axis" Id="{8a4a8626-7eae-45de-981b-850b72ae5299}">
      <Declaration><![CDATA[METHOD _F_Axis : HRESULT
VAR_IN_OUT
	a_pstAxisParameterSet : POINTER TO Tc2_MC2.ST_AxisParameterSet; //pointer to array
	pstAxisMapping : UDINT;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[stAxisParameterSet.AxisId := axis.NcToPlc.AxisId;
a_pstAxisParameterSet := ADR(stAxisParameterSet);
pstAxisMapping := SIZEOF(stAxisParameterSet);

_F_Axis := MPM_FBResult.E_Result.S_OK;
]]></ST>
      </Implementation>
    </Method>
    <Method Name="_F_IO" Id="{8d18df3f-e12a-48c9-9bf2-8f499f7d4a3c}">
      <Declaration><![CDATA[METHOD PROTECTED  _F_IO : HResult
VAR_IN_OUT
	a_pstIOMappingJson : POINTER TO ST_IOMappingJson; //pointer to array
	ustIOMappingJson : UDINT; 		
END_VAR
VAR_INST
	stIOMappingJson : ARRAY [0..1] OF ST_IOMappingJson;
END_VAR
VAR
	x : DINT;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[//	ioVar : POINTER TO BOOL;
//	ioVar2 : POINTER TO REAL;
F_Map_ST_IOMappingJson(ADR(a_pstIOMappingJson[F_Add1(x)]),'lowLevelSensor',ADR(lowLevelSensor));
F_Map_ST_IOMappingJson(ADR(a_pstIOMappingJson[F_Add1(x)]),'HighLevelSensor',ADR(HighLevelSensor));

a_pstIOMappingJson := ADR(stIOMappingJson);
ustIOMappingJson := SIZEOF(stIOMappingJson);




_F_IO := MPM_FBResult.E_Result.S_OK;]]></ST>
      </Implementation>
    </Method>
    <Method Name="_F_Recipe" Id="{234c8d91-ea4d-413b-922f-4a0a4767e40f}">
      <Declaration><![CDATA[(*
return the list of vars that want to be saved and loaded 
*)

METHOD PROTECTED  _F_Recipe : HResult
VAR_IN_OUT
	a_pstAnyTypeUser : POINTER TO MPM_JsonParser.ST_AnyType_User; //pointer to array
	uAnyTypeUser : UDINT; //size of array	
END_VAR
VAR_OUTPUT
END_VAR
VAR
	x : DINT;
END_VAR
VAR_INST
	a_stAnyTypeUser : ARRAY [0..1] OF MPM_JsonParser.ST_AnyType_User;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[MPM_JsonParser.F_Map_ST_AnyType_User('volume',volume,a_stAnyTypeUser[F_Add1(x)]);
MPM_JsonParser.F_Map_ST_AnyType_User('timeToDispense',timeToDispense,a_stAnyTypeUser[F_Add1(x)]);


a_pstAnyTypeUser := ADR(a_stAnyTypeUser);
uAnyTypeUser := SIZEOF(a_stAnyTypeUser);

_F_Recipe := MPM_FBResult.E_Result.S_OK;]]></ST>
      </Implementation>
    </Method>
    <Method Name="_F_System" Id="{38d68840-38df-4f32-94b1-c603dea7bf7a}">
      <Declaration><![CDATA[METHOD PROTECTED _F_System : HResult
VAR_IN_OUT
	a_pstAnyTypeUser : POINTER TO MPM_JsonParser.ST_AnyType_User; //pointer to array
	uAnyTypeUser : UDINT; //size of array	
END_VAR
VAR_INST
	a_stAnyTypeUser : ARRAY [0..0] OF MPM_JsonParser.ST_AnyType_User;
END_VAR
VAR
	x : DINT;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[MPM_JsonParser.F_Map_ST_AnyType_User('volumePerRotation',volumePerRotation,a_stAnyTypeUser[F_Add1(x)]);


a_pstAnyTypeUser := ADR(a_stAnyTypeUser);
uAnyTypeUser := SIZEOF(a_stAnyTypeUser);

_F_System := MPM_FBResult.E_Result.S_OK;]]></ST>
      </Implementation>
    </Method>
    <Method Name="FB_init" Id="{5b2a3270-bbeb-48b8-b316-1fe75897223e}">
      <Declaration><![CDATA[METHOD FB_init : BOOL
VAR_INPUT
	bInitRetains : BOOL; // if TRUE, the retain variables are initialized (warm start / cold start)
	bInCopyCode : BOOL;  // if TRUE, the instance afterwards gets moved into the copy code (online change)
	fbName : STRING;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[

]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_CloseValve" Id="{6ce41848-ca20-4d56-b479-59178105a56c}" FolderPath="Events\">
      <Declaration><![CDATA[METHOD PROTECTED M_CloseValve : HResult
VAR_INPUT
	lastResult : HResult;	
END_VAR
VAR_INST
	_lastResult : HResult;
	_fbResult : FB_ResultHelper_V2_1;
	_state : DINT;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF _fbResult.M_MethodResult(M_CloseValve,lastResult,ADR(_lastResult)) = FALSE THEN
	RETURN;
END_IF

IF _fbResult.P_MethodResult = E_Result.S_OK THEN
	_state := 0;
END_IF


_fbResult.P_MethodResult := E_Result.S_WORKING;


CASE _state OF 
	0:
		testIO := TRUE;
		IF closeFeedBack = TRUE THEN
			_fbResult.P_MethodResult := E_Result.S_OK;
		END_IF
END_CASE]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_Events" Id="{ffc56fab-7a76-4ebf-95d7-25e8eeddf966}">
      <Declaration><![CDATA[METHOD PUBLIC  M_Events : HResult
VAR_INPUT
	lastResult : HResult;
	eventID : DINT;
END_VAR
VAR_INST
	_fbResult : FB_ResultHelper_V2_1;
	_lastResult : HResult;
	openValve_Result : HRESULT;
	closeValve_Result : HRESULT;
	enablePump_Result : HRESULT;
	homeDirect_Result : HRESULT; 
	moveABS_Result : HRESULT; 	
	moveInter_Result : HRESULT; 		
	moveVelocity_Result : HRESULT; 		
	halt_Result : HRESULT;
END_VAR
VAR 
	HomingMode : Tc2_MC2.MC_HomingMode;
	OptionsHomeing : Tc2_MC2.ST_HomingOptions;
	BufferMode : Tc2_MC2.MC_BufferMode;
	OptionsPower : Tc2_MC2.ST_PowerOptions;	
	Options : Tc2_MC2.ST_MoveOptions;		
END_VAR

VAR_INST
	executeDyn : BOOL;
	VelocityDyn : LREAL := 10; 
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[CASE eventID OF 
	1 : //Open Valve
		IF _fbResult.M_MethodResult(M_Events,lastResult,ADR(openValve_Result)) = FALSE THEN
			RETURN;
		END_IF
		IF closeValve_Result > E_Result.S_OK THEN
			closeValve_Result := -1; //fail it out
		END_IF	
		_fbResult.P_MethodResult := M_OpenValve(_fbResult.P_MethodResult);
	2:
		IF _fbResult.M_MethodResult(M_Events,lastResult,ADR(closeValve_Result)) = FALSE THEN
			RETURN;
		END_IF
		IF openValve_Result > E_Result.S_OK THEN
			openValve_Result := -1; //fail it out
		END_IF
		_fbResult.P_MethodResult := M_CloseValve(_fbResult.P_MethodResult);	
	3: //enable pump
		IF _fbResult.M_MethodResult(M_Events,lastResult,ADR(enablePump_Result)) = FALSE THEN
			RETURN;
		END_IF	
		_fbResult.P_MethodResult := fbAxisControl.MC_Power(_fbResult.P_MethodResult,TRUE,TRUE,TRUE,100.0,BufferMode,OptionsPower);
	4: //Home Pump
		IF _fbResult.M_MethodResult(M_Events,lastResult,ADR(homeDirect_Result)) = FALSE THEN
			RETURN;
		END_IF			
		HomingMode := Tc2_MC2.MC_HomingMode.MC_Direct; 
		_fbResult.P_MethodResult := fbAxisControl.MC_Home(_fbResult.P_MethodResult,0.0,HomingMode,BufferMode,OptionsHomeing);
	5: //move pump absoulte
		IF _fbResult.M_MethodResult(M_Events,lastResult,ADR(moveABS_Result)) = FALSE THEN
			RETURN;
		END_IF		
		_fbResult.P_MethodResult := fbAxisControl.MC_MoveAbsoulte(_fbResult.P_MethodResult,
			Position := F_TO_LREAL(mcMoveAbs[0].pvalue),
			Velocity := F_TO_LREAL(mcMoveAbs[1].pvalue),
			Acceleration := F_TO_LREAL(mcMoveAbs[2].pvalue),
			Deceleration := F_TO_LREAL(mcMoveAbs[3].pvalue),
			Jerk := F_TO_LREAL(mcMoveAbs[4].pvalue),
			BufferMode := BufferMode,
			Options := Options);	
	6: //halt pump
		IF _fbResult.M_MethodResult(M_Events,lastResult,ADR(halt_Result)) = FALSE THEN
			RETURN;
		END_IF			
		_fbResult.P_MethodResult := fbAxisControl.MC_Halt(_fbResult.P_MethodResult,
			1000.0,
			1000.0);				
	7: //pump_continuous
	IF _fbResult.M_MethodResult(M_Events,lastResult,ADR(moveVelocity_Result)) = FALSE THEN
			RETURN;
		END_IF		
		VelocityDyn := VelocityDyn + 0.10;
		IF VelocityDyn > 1000 THEN
			VelocityDyn := 10;
		END_IF
		_fbResult.P_MethodResult := fbAxisControl.MC_MoveVelocityDyn(
			_fbResult.P_MethodResult,
			Direction := Tc2_MC2.MC_Direction.MC_Positive_Direction,
			executeDyn,
			VelocityDyn,			
			1000,
			1000,
			10000,
			BufferMode,
			Options);	
	8: //pump_intermeate
	fbKinenmatics2.jerkLimit := 100000;
	fbKinenmatics2.accelLimit := 15000.0;	
	fbKinenmatics2.decelLimit := 15000.0;	
	fbKinenmatics2.velocityLimit := 2500;	
	fbKinenmatics2.positionDelta := volume;		
	fbKinenmatics2.timeToComplete := timeToDispense;
	fbKinenmatics2();
	IF _fbResult.M_MethodResult(M_Events,lastResult,ADR(moveInter_Result)) = FALSE THEN
			RETURN;
		END_IF		
		_fbResult.P_MethodResult := fbAxisControl.MC_MoveRelative(
			_fbResult.P_MethodResult,
			volume,
			fbKinenmatics2.velocityOutput,
			fbKinenmatics2.accelOutput,			
			fbKinenmatics2.decelLimit,		
			fbKinenmatics2.jerkOutput,		
			BufferMode,
			Options);			
END_CASE
]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_Execute" Id="{56153d5a-955b-4997-bf85-bfe2ca059757}">
      <Declaration><![CDATA[METHOD PUBLIC M_Execute : HRESULT
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[fbAxisControl.M_Execute();]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_GetEvent" Id="{55c7dc70-85b6-4927-90ef-d2a1607f9605}">
      <Declaration><![CDATA[METHOD M_GetEvent : HResult
VAR_INPUT
	pFbDiscreteEvents : POINTER TO POINTER TO FB_DiscreteEvents;
	index : DINT;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[CASE index OF
	0:
		pFbDiscreteEvents^ := ADR(fbEventEnable);
	1:
		pFbDiscreteEvents^ := ADR(fbEventHomePump);	
	2:
		pFbDiscreteEvents^ := ADR(fbEventMoveAbs);
	3:
		pFbDiscreteEvents^ := ADR(fbEventMoveHalt);	
	4:
		pFbDiscreteEvents^ := ADR(fbEventPumpContinuous);	
	5:
		pFbDiscreteEvents^ := ADR(fbEventPumpInterminate);	
	ELSE
		M_GetEvent := E_Result.S_FAILED;								
END_CASE]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_OpenValve" Id="{1d61b728-5b23-417e-8cf6-8a998ec2c686}" FolderPath="Events\">
      <Declaration><![CDATA[METHOD PROTECTED M_OpenValve : HResult
VAR_INPUT
	lastResult : HResult;	
END_VAR
VAR_INST
	_lastResult : HResult;
	_fbResult : FB_ResultHelper_V2_1;
	_state : DINT;	
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF _fbResult.M_MethodResult(M_OpenValve,lastResult,ADR(_lastResult)) = FALSE THEN
	RETURN;
END_IF

IF _fbResult.P_MethodResult = E_Result.S_OK THEN
	_state := 0;
END_IF


_fbResult.P_MethodResult := E_Result.S_WORKING;


CASE _state OF 
	0:
		testIO := FALSE;
		IF openFeedBack = TRUE THEN
			_fbResult.P_MethodResult := E_Result.S_OK;
		END_IF
END_CASE]]></ST>
      </Implementation>
    </Method>
    <Property Name="P_GetNumOfEvents" Id="{61d7c5cd-c689-4065-9aba-5835c5d5d6c1}">
      <Declaration><![CDATA[PROPERTY P_GetNumOfEvents : DINT]]></Declaration>
      <Get Name="Get" Id="{fee2f59a-d6da-4d5a-b2a3-33ea22d74d3a}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[P_GetNumOfEvents := 6; //0..5]]></ST>
        </Implementation>
      </Get>
    </Property>
    <LineIds Name="FB_Pump">
      <LineId Id="9" Count="0" />
    </LineIds>
    <LineIds Name="FB_Pump._F_Axis">
      <LineId Id="27" Count="0" />
      <LineId Id="22" Count="2" />
      <LineId Id="7" Count="0" />
      <LineId Id="25" Count="0" />
    </LineIds>
    <LineIds Name="FB_Pump._F_IO">
      <LineId Id="21" Count="0" />
      <LineId Id="19" Count="0" />
      <LineId Id="32" Count="0" />
      <LineId Id="36" Count="2" />
      <LineId Id="15" Count="0" />
      <LineId Id="39" Count="2" />
      <LineId Id="16" Count="0" />
      <LineId Id="9" Count="0" />
    </LineIds>
    <LineIds Name="FB_Pump._F_Recipe">
      <LineId Id="12" Count="0" />
      <LineId Id="16" Count="0" />
      <LineId Id="18" Count="1" />
      <LineId Id="17" Count="0" />
      <LineId Id="20" Count="0" />
      <LineId Id="22" Count="0" />
      <LineId Id="21" Count="0" />
    </LineIds>
    <LineIds Name="FB_Pump._F_System">
      <LineId Id="8" Count="0" />
      <LineId Id="10" Count="4" />
      <LineId Id="7" Count="0" />
    </LineIds>
    <LineIds Name="FB_Pump.FB_init">
      <LineId Id="8" Count="0" />
      <LineId Id="10" Count="0" />
      <LineId Id="9" Count="0" />
    </LineIds>
    <LineIds Name="FB_Pump.M_CloseValve">
      <LineId Id="14" Count="1" />
      <LineId Id="5" Count="0" />
      <LineId Id="17" Count="3" />
      <LineId Id="22" Count="1" />
      <LineId Id="16" Count="0" />
      <LineId Id="25" Count="1" />
      <LineId Id="24" Count="0" />
      <LineId Id="27" Count="0" />
      <LineId Id="29" Count="3" />
      <LineId Id="28" Count="0" />
    </LineIds>
    <LineIds Name="FB_Pump.M_Events">
      <LineId Id="234" Count="31" />
      <LineId Id="267" Count="11" />
      <LineId Id="280" Count="3" />
      <LineId Id="287" Count="2" />
      <LineId Id="330" Count="3" />
      <LineId Id="291" Count="0" />
      <LineId Id="329" Count="0" />
      <LineId Id="292" Count="0" />
      <LineId Id="322" Count="0" />
      <LineId Id="327" Count="0" />
      <LineId Id="295" Count="4" />
      <LineId Id="285" Count="0" />
      <LineId Id="345" Count="5" />
      <LineId Id="344" Count="0" />
      <LineId Id="353" Count="1" />
      <LineId Id="352" Count="0" />
      <LineId Id="335" Count="6" />
      <LineId Id="343" Count="0" />
      <LineId Id="334" Count="0" />
      <LineId Id="286" Count="0" />
      <LineId Id="177" Count="0" />
    </LineIds>
    <LineIds Name="FB_Pump.M_Execute">
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="FB_Pump.M_GetEvent">
      <LineId Id="5" Count="0" />
      <LineId Id="8" Count="0" />
      <LineId Id="10" Count="0" />
      <LineId Id="17" Count="9" />
      <LineId Id="32" Count="1" />
      <LineId Id="9" Count="0" />
    </LineIds>
    <LineIds Name="FB_Pump.M_OpenValve">
      <LineId Id="12" Count="17" />
      <LineId Id="10" Count="0" />
    </LineIds>
    <LineIds Name="FB_Pump.P_GetNumOfEvents.Get">
      <LineId Id="2" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>