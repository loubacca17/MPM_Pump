<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.12">
  <POU Name="FB_Pump" Id="{0fa90de2-8e52-41d8-b4ec-9a5ee81c648f}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK FB_Pump EXTENDS FB_ConfigBase
VAR_INPUT
END_VAR
VAR_OUTPUT
END_VAR
VAR
	axis : Tc2_MC2.AXIS_REF;		
	var1 : DINT;
	var2 : STRING;
	ioVar : POINTER TO BOOL;
	ioVar2 : POINTER TO REAL;
	fbAxisControl : FB_AxisControl(axis);
END_VAR

VAR
	testIO : BOOL;
	closeFeedBack : BOOL;
	openFeedBack : BOOL;
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[]]></ST>
    </Implementation>
    <Folder Name="Events" Id="{6db3c611-ab91-42ac-8c3a-67fe89fe2804}" />
    <Method Name="_F_Axis" Id="{8a4a8626-7eae-45de-981b-850b72ae5299}">
      <Declaration><![CDATA[METHOD _F_Axis : HRESULT
VAR_IN_OUT
	a_pstAxisParameterSet : POINTER TO Tc2_MC2.ST_AxisParameterSet; //pointer to array
	pstAxisMapping : UDINT;
END_VAR
VAR_INST
	stAxisParameterSet : Tc2_MC2.ST_AxisParameterSet;  
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[stAxisParameterSet.AxisId := axis.NcToPlc.AxisId;
a_pstAxisParameterSet := ADR(stAxisParameterSet);
pstAxisMapping := SIZEOF(stAxisParameterSet);

_F_Axis := MPM_FBResult.E_Result.S_OK;
]]></ST>
      </Implementation>
    </Method>
    <Method Name="_F_IO" Id="{8d18df3f-e12a-48c9-9bf2-8f499f7d4a3c}">
      <Declaration><![CDATA[METHOD PROTECTED  _F_IO : HResult
VAR_IN_OUT
	a_pstIOMappingJson : POINTER TO ST_IOMappingJson; //pointer to array
	ustIOMappingJson : UDINT; 		
END_VAR
VAR_INST
	stIOMappingJson : ARRAY [0..1] OF ST_IOMappingJson;
END_VAR
VAR
	x : DINT;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[//	ioVar : POINTER TO BOOL;
//	ioVar2 : POINTER TO REAL;
F_Map_ST_IOMappingJson(ADR(a_pstIOMappingJson[F_Add1(x)]),'ioVar',ADR(ioVar));
F_Map_ST_IOMappingJson(ADR(a_pstIOMappingJson[F_Add1(x)]),'ioVar2',ADR(ioVar2));

a_pstIOMappingJson := ADR(stIOMappingJson);
ustIOMappingJson := SIZEOF(stIOMappingJson);




_F_IO := MPM_FBResult.E_Result.S_OK;]]></ST>
      </Implementation>
    </Method>
    <Method Name="_F_Recipe" Id="{234c8d91-ea4d-413b-922f-4a0a4767e40f}">
      <Declaration><![CDATA[(*
return the list of vars that want to be saved and loaded 
*)

METHOD PROTECTED  _F_Recipe : HResult
VAR_IN_OUT
	a_pstAnyTypeUser : POINTER TO MPM_JsonParser.ST_AnyType_User; //pointer to array
	uAnyTypeUser : UDINT; //size of array	
END_VAR
VAR_OUTPUT
END_VAR
VAR
	x : DINT;
END_VAR
VAR_INST
	a_stAnyTypeUser : ARRAY [0..1] OF MPM_JsonParser.ST_AnyType_User;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[MPM_JsonParser.F_Map_ST_AnyType_User('var1',var1,a_stAnyTypeUser[F_Add1(x)]);
MPM_JsonParser.F_Map_ST_AnyType_User('var2',var2,a_stAnyTypeUser[F_Add1(x)]);


a_pstAnyTypeUser := ADR(a_stAnyTypeUser);
uAnyTypeUser := SIZEOF(a_stAnyTypeUser);

_F_Recipe := MPM_FBResult.E_Result.S_OK;]]></ST>
      </Implementation>
    </Method>
    <Method Name="_F_System" Id="{38d68840-38df-4f32-94b1-c603dea7bf7a}">
      <Declaration><![CDATA[METHOD PROTECTED _F_System : HResult
VAR_IN_OUT
	a_pstAnyTypeUser : POINTER TO MPM_JsonParser.ST_AnyType_User; //pointer to array
	uAnyTypeUser : UDINT; //size of array	
END_VAR
VAR_INST
	a_stAnyTypeUser : ARRAY [0..1] OF MPM_JsonParser.ST_AnyType_User;
END_VAR
VAR
	x : DINT;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[MPM_JsonParser.F_Map_ST_AnyType_User('var1',var1,a_stAnyTypeUser[F_Add1(x)]);
MPM_JsonParser.F_Map_ST_AnyType_User('var2',var2,a_stAnyTypeUser[F_Add1(x)]);


a_pstAnyTypeUser := ADR(a_stAnyTypeUser);
uAnyTypeUser := SIZEOF(a_stAnyTypeUser);

_F_System := MPM_FBResult.E_Result.S_OK;]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_CloseValve" Id="{6ce41848-ca20-4d56-b479-59178105a56c}" FolderPath="Events\">
      <Declaration><![CDATA[METHOD PROTECTED M_CloseValve : HResult
VAR_INPUT
	lastResult : HResult;	
END_VAR
VAR_INST
	_lastResult : HResult;
	_fbResult : FB_ResultHelper_V2_1;
	_state : DINT;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF _fbResult.M_MethodResult(M_CloseValve,lastResult,ADR(_lastResult)) = FALSE THEN
	RETURN;
END_IF

IF _fbResult.P_MethodResult = E_Result.S_OK THEN
	_state := 0;
END_IF


_fbResult.P_MethodResult := E_Result.S_WORKING;


CASE _state OF 
	0:
		testIO := TRUE;
		IF closeFeedBack = TRUE THEN
			_fbResult.P_MethodResult := E_Result.S_OK;
		END_IF
END_CASE]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_Events" Id="{ffc56fab-7a76-4ebf-95d7-25e8eeddf966}">
      <Declaration><![CDATA[METHOD PUBLIC  M_Events : HResult
VAR_INPUT
	lastResult : HResult;
	eventID : DINT;
END_VAR
VAR_IN_OUT
	varInput : ARRAY [*] OF MPM_JsonParser.ST_AnyType_User;	//What was input		
END_VAR
VAR_INST
	_fbResult : FB_ResultHelper_V2_1;
	_lastResult : HResult;
	openValve_Result : HRESULT;
	closeValve_Result : HRESULT;
	enablePump_Result : HRESULT;
	homeDirect_Result : HRESULT; 
	moveABS_Result : HRESULT; 	
END_VAR
VAR 
	HomingMode : Tc2_MC2.MC_HomingMode;
	OptionsHomeing : Tc2_MC2.ST_HomingOptions;
	BufferMode : Tc2_MC2.MC_BufferMode;
	OptionsPower : Tc2_MC2.ST_PowerOptions;	
	Position : POINTER TO LREAL; //MPM_JsonParser.ST_AnyType_User := (diSize := SIZEOF(LREAL), name := 'Position', typeclass := MPM_JsonParser.E_TypeClassEx.TYPE_LREAL);	
	Velocity : POINTER TO LREAL := 10 ;
	Acceleration : POINTER TO LREAL := 100;
	Deceleration : POINTER TO LREAL := 100;
	Jerk : POINTER TO LREAL := 1000;	
	Options : Tc2_MC2.ST_MoveOptions;		
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[CASE eventID OF 
	1 : //Open Valve
		IF _fbResult.M_MethodResult(M_Events,lastResult,ADR(openValve_Result)) = FALSE THEN
			RETURN;
		END_IF
		IF closeValve_Result > E_Result.S_OK THEN
			closeValve_Result := -1; //fail it out
		END_IF	
		_fbResult.P_MethodResult := M_OpenValve(_fbResult.P_MethodResult);
	2:
		IF _fbResult.M_MethodResult(M_Events,lastResult,ADR(closeValve_Result)) = FALSE THEN
			RETURN;
		END_IF
		IF openValve_Result > E_Result.S_OK THEN
			openValve_Result := -1; //fail it out
		END_IF
		_fbResult.P_MethodResult := M_CloseValve(_fbResult.P_MethodResult);	
	3: //enable pump
		IF _fbResult.M_MethodResult(M_Events,lastResult,ADR(enablePump_Result)) = FALSE THEN
			RETURN;
		END_IF	
		_fbResult.P_MethodResult := fbAxisControl.MC_Power(_fbResult.P_MethodResult,TRUE,TRUE,100.0,BufferMode,OptionsPower);
	4: //Home Pump
		IF _fbResult.M_MethodResult(M_Events,lastResult,ADR(homeDirect_Result)) = FALSE THEN
			RETURN;
		END_IF			
		HomingMode := Tc2_MC2.MC_HomingMode.MC_Direct; 
		_fbResult.P_MethodResult := fbAxisControl.MC_Home(_fbResult.P_MethodResult,0.0,HomingMode,BufferMode,OptionsHomeing);
	5: //move pump absoulte
		IF _fbResult.M_MethodResult(M_Events,lastResult,ADR(moveABS_Result)) = FALSE THEN
			RETURN;
		END_IF		
			F_Event_ST_AnyType_Compare(Position^,ADR(Position),ADR(varInput[0]));
		_fbResult.P_MethodResult := fbAxisControl.MC_MoveAbsoulte(_fbResult.P_MethodResult,
			Position := Position^,
			Velocity := Velocity^,
			Acceleration := Acceleration^,
			Deceleration := Deceleration^,
			Jerk := Jerk^,
			BufferMode := BufferMode,
			Options := Options);	
	6: //stop pump
		
END_CASE]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_Execute" Id="{56153d5a-955b-4997-bf85-bfe2ca059757}">
      <Declaration><![CDATA[METHOD PUBLIC M_Execute : HRESULT
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[fbAxisControl.M_Execute();]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_GetEvents" Id="{9153554d-e1a4-4a5c-af7f-a9a0da2dc60f}">
      <Declaration><![CDATA[METHOD PUBLIC  M_GetEvents : HResult
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_OpenValve" Id="{1d61b728-5b23-417e-8cf6-8a998ec2c686}" FolderPath="Events\">
      <Declaration><![CDATA[METHOD PROTECTED M_OpenValve : HResult
VAR_INPUT
	lastResult : HResult;	
END_VAR
VAR_INST
	_lastResult : HResult;
	_fbResult : FB_ResultHelper_V2_1;
	_state : DINT;	
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF _fbResult.M_MethodResult(M_OpenValve,lastResult,ADR(_lastResult)) = FALSE THEN
	RETURN;
END_IF

IF _fbResult.P_MethodResult = E_Result.S_OK THEN
	_state := 0;
END_IF


_fbResult.P_MethodResult := E_Result.S_WORKING;


CASE _state OF 
	0:
		testIO := FALSE;
		IF openFeedBack = TRUE THEN
			_fbResult.P_MethodResult := E_Result.S_OK;
		END_IF
END_CASE]]></ST>
      </Implementation>
    </Method>
    <LineIds Name="FB_Pump">
      <LineId Id="9" Count="0" />
    </LineIds>
    <LineIds Name="FB_Pump._F_Axis">
      <LineId Id="27" Count="0" />
      <LineId Id="22" Count="2" />
      <LineId Id="7" Count="0" />
      <LineId Id="25" Count="0" />
    </LineIds>
    <LineIds Name="FB_Pump._F_IO">
      <LineId Id="21" Count="0" />
      <LineId Id="19" Count="0" />
      <LineId Id="32" Count="0" />
      <LineId Id="36" Count="2" />
      <LineId Id="15" Count="0" />
      <LineId Id="39" Count="2" />
      <LineId Id="16" Count="0" />
      <LineId Id="9" Count="0" />
    </LineIds>
    <LineIds Name="FB_Pump._F_Recipe">
      <LineId Id="12" Count="0" />
      <LineId Id="16" Count="0" />
      <LineId Id="18" Count="1" />
      <LineId Id="17" Count="0" />
      <LineId Id="20" Count="0" />
      <LineId Id="22" Count="0" />
      <LineId Id="21" Count="0" />
    </LineIds>
    <LineIds Name="FB_Pump._F_System">
      <LineId Id="8" Count="6" />
      <LineId Id="7" Count="0" />
    </LineIds>
    <LineIds Name="FB_Pump.M_CloseValve">
      <LineId Id="14" Count="1" />
      <LineId Id="5" Count="0" />
      <LineId Id="17" Count="3" />
      <LineId Id="22" Count="1" />
      <LineId Id="16" Count="0" />
      <LineId Id="25" Count="1" />
      <LineId Id="24" Count="0" />
      <LineId Id="27" Count="0" />
      <LineId Id="29" Count="3" />
      <LineId Id="28" Count="0" />
    </LineIds>
    <LineIds Name="FB_Pump.M_Events">
      <LineId Id="7" Count="0" />
      <LineId Id="10" Count="0" />
      <LineId Id="18" Count="0" />
      <LineId Id="22" Count="1" />
      <LineId Id="30" Count="1" />
      <LineId Id="29" Count="0" />
      <LineId Id="11" Count="1" />
      <LineId Id="24" Count="1" />
      <LineId Id="21" Count="0" />
      <LineId Id="26" Count="2" />
      <LineId Id="13" Count="0" />
      <LineId Id="32" Count="0" />
      <LineId Id="54" Count="1" />
      <LineId Id="53" Count="0" />
      <LineId Id="35" Count="0" />
      <LineId Id="33" Count="0" />
      <LineId Id="61" Count="1" />
      <LineId Id="38" Count="0" />
      <LineId Id="67" Count="0" />
      <LineId Id="63" Count="0" />
      <LineId Id="36" Count="0" />
      <LineId Id="69" Count="1" />
      <LineId Id="64" Count="0" />
      <LineId Id="134" Count="0" />
      <LineId Id="40" Count="0" />
      <LineId Id="77" Count="5" />
      <LineId Id="108" Count="0" />
      <LineId Id="39" Count="0" />
      <LineId Id="41" Count="0" />
      <LineId Id="9" Count="0" />
    </LineIds>
    <LineIds Name="FB_Pump.M_Execute">
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="FB_Pump.M_GetEvents">
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="FB_Pump.M_OpenValve">
      <LineId Id="12" Count="17" />
      <LineId Id="10" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>