<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.12">
  <POU Name="FB_ConfigBase" Id="{3ccc0d41-27f9-41ab-b33f-1e963a615b44}" SpecialFunc="None">
    <Declaration><![CDATA[(*
Will be an abstract class that will be used to configure all parts of the machine through json
*)

FUNCTION_BLOCK ABSTRACT FB_ConfigBase
VAR_INPUT
END_VAR
VAR_OUTPUT
END_VAR
VAR 
	_fbName : STRING; //name of FB set on init
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[]]></ST>
    </Implementation>
    <Folder Name="ABSTRACT" Id="{d3f0e259-1061-426a-b7a1-3591a9d5be2f}" />
    <Folder Name="Protected" Id="{d31bea82-4c8d-4864-8213-7cfbba3c0754}" />
    <Method Name="_F_Axis" Id="{7fa39416-568e-4119-8393-652fc6472acb}" FolderPath="ABSTRACT\">
      <Declaration><![CDATA[METHOD _F_Axis : HRESULT
VAR_IN_OUT
	a_pstAxisParameterSet : POINTER TO Tc2_MC2.ST_AxisParameterSet; //pointer to array
	pstAxisMapping : UDINT;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[]]></ST>
      </Implementation>
    </Method>
    <Method Name="_F_IO" Id="{25f7451c-b2be-4782-91c3-53451c901d29}" FolderPath="ABSTRACT\">
      <Declaration><![CDATA[METHOD PROTECTED ABSTRACT _F_IO : HResult
VAR_IN_OUT
	a_pstIOMappingJson : POINTER TO ST_IOMappingJson; //pointer to array
	ustIOMappingJson : UDINT; 		
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[]]></ST>
      </Implementation>
    </Method>
    <Method Name="_F_Recipe" Id="{acb8c5d6-5487-4d41-9ec0-f4a34dd65731}" FolderPath="ABSTRACT\">
      <Declaration><![CDATA[(*
return the list of vars that want to be saved and loaded 
*)

METHOD PROTECTED ABSTRACT _F_Recipe : HResult
VAR_IN_OUT
	a_pstAnyTypeUser : POINTER TO MPM_JsonParser.ST_AnyType_User; //pointer to array
	uAnyTypeUser : UDINT; //size of array	
END_VAR
VAR_OUTPUT

END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[]]></ST>
      </Implementation>
    </Method>
    <Method Name="_F_System" Id="{c67585fa-6db9-4ba3-8b65-2665a130374f}" FolderPath="ABSTRACT\">
      <Declaration><![CDATA[METHOD PROTECTED ABSTRACT _F_System : HResult
VAR_IN_OUT
	a_pstAnyTypeUser : POINTER TO MPM_JsonParser.ST_AnyType_User; //pointer to array
	uAnyTypeUser : UDINT; //size of array	
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[]]></ST>
      </Implementation>
    </Method>
    <Method Name="F_AXIS" Id="{c0243cb9-9b32-4370-9384-0993220a2226}">
      <Declaration><![CDATA[METHOD PUBLIC FINAL F_AXIS : HRESULT
VAR_INPUT
	lastResult : HRESULT;
	sJson : SJsonValue;
	pfbJsonSchema : POINTER TO FB_NCAxisJson_V2;	
	bGet : BOOL;
END_VAR

VAR_INST
	_fbResult : FB_ResultHelper_V2;
	pResult : POINTER TO HRESULT;
END_VAR

VAR
	a_pstAxisParameterSet : POINTER TO Tc2_MC2.ST_AxisParameterSet;
	dstAxisParameterSet : UDINT; //number of bytes in a_stAnyUser
	
	uSizeOfArray : UDINT;
	
	pstAxisParameterSet : POINTER TO Tc2_MC2.ST_AxisParameterSet; //pointer for loop
	x : UDINT;
END_VAR


VAR CONSTANT
	uSizeOfStAnyType : UDINT := SIZEOF(Tc2_MC2.ST_AxisParameterSet);
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF _fbResult.M_MethodResult(F_AXIS,ADR(pResult),lastResult) = FALSE THEN
	RETURN;
END_IF


pResult^ := _F_Axis(a_pstAxisParameterSet,dstAxisParameterSet);
//pResult^ := MPM_FBResult.E_Result.S_WORKING;
IF bGet = FALSE THEN
	sJson := pfbJsonSchema^.M_SetJsonMember(sJson,_fbName);
	IF a_pstAxisParameterSet > 0 AND dstAxisParameterSet > 0 AND uSizeOfStAnyType > 0 THEN //make sure all values are vaild
		uSizeOfArray := dstAxisParameterSet/uSizeOfStAnyType - 1; //get number of items in array
		FOR x := 0 TO uSizeOfArray BY 1 DO //loop through all items 
			pstAxisParameterSet := a_pstAxisParameterSet + uSizeOfStAnyType*x; // get array position
			pResult^ := pfbJsonSchema^.M_SetAxisJson(pResult^,sJson,pstAxisParameterSet);
		END_FOR
	END_IF	
ELSIF bGet = TRUE THEN
	sJson := pfbJsonSchema^.FindMember(sJson,_fbName);
	IF a_pstAxisParameterSet > 0 AND dstAxisParameterSet > 0 AND uSizeOfStAnyType > 0 THEN //make sure all values are vaild
		uSizeOfArray := dstAxisParameterSet/uSizeOfStAnyType - 1; //get number of items in array
		FOR x := 0 TO uSizeOfArray BY 1 DO //loop through all items 
			pstAxisParameterSet := a_pstAxisParameterSet + uSizeOfStAnyType*x; // get array position
			pResult^ := pfbJsonSchema^.M_GetAxisJson(pResult^,sJson,pstAxisParameterSet);
		END_FOR
	END_IF
END_IF
]]></ST>
      </Implementation>
    </Method>
    <Method Name="F_Event_ST_AnyType_Compare" Id="{d5d96574-3807-41bd-83c3-530358c10783}">
      <Declaration><![CDATA[METHOD PROTECTED F_Event_ST_AnyType_Compare : HResult
VAR_INPUT
	varMethod : ANY; //What the evvent requires	
	adrPvoid : POINTER TO PVOID; //PVOID FOR any value
	varInput : POINTER TO MPM_JsonParser.ST_AnyType_User;	//What was input
END_VAR
VAR
	upperBound : DINT;
	x : DINT;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF varMethod.TypeClass = varInput^.typeclass THEN //check to see if type is the same
	IF varMethod.diSize = varInput^.diSize THEN //check if the size is the same
		IF varInput[x].pvalue > 0 THEN
			adrPvoid := varInput^.pvalue;  //they equal send meathod values in
		ELSE
			F_Event_ST_AnyType_Compare := MPM_FBResult.E_Result.S_FAILED; //no pointer for type
		END_IF	
	ELSE
		F_Event_ST_AnyType_Compare := MPM_FBResult.E_Result.S_FAILED; //size mismatch
	END_IF
ELSE
	F_Event_ST_AnyType_Compare := MPM_FBResult.E_Result.S_FAILED; //type mismatch
END_IF
]]></ST>
      </Implementation>
    </Method>
    <Method Name="F_IO" Id="{3a02837e-fabe-4f90-b88e-c4f1e99bdab4}">
      <Declaration><![CDATA[METHOD PUBLIC FINAL F_IO : HRESULT
VAR_INPUT
	lastResult : HRESULT;
	sJson : SJsonValue;
	pfbJsonSchema : POINTER TO FB_JsonSchemaEx_OLD;
	bGet : BOOL;	
END_VAR

VAR_INST
	_fbResult : FB_ResultHelper_V2;
	pResult : POINTER TO HRESULT;
END_VAR

VAR
	a_pstIOMappingJson : POINTER TO ST_IOMappingJson; // pointer to array of vars
	uAnyTypeUser : UDINT; //number of bytes in a_stAnyUser
	
	uSizeOfArray : UDINT;
	pstIOMappingJson : POINTER TO ST_IOMappingJson; //pointer for loop
	x : UDINT;
END_VAR


VAR CONSTANT
	uSizeOfStAnyType : UDINT := SIZEOF(ST_IOMappingJson);
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF _fbResult.M_MethodResult(F_IO,ADR(pResult),lastResult) = FALSE THEN
	RETURN;
END_IF


pResult^ := _F_IO(a_pstIOMappingJson,uAnyTypeUser); //gets pointer from FB


pResult^ := MPM_FBResult.E_Result.S_WORKING;
//set
IF bGet = FALSE THEN
	sJson := pfbJsonSchema^.M_SetJsonMember(sJson,_fbName);
	IF a_pstIOMappingJson > 0 AND_THEN uAnyTypeUser > 0 AND uSizeOfStAnyType > 0 THEN //make sure all values are vaild
		uSizeOfArray := uAnyTypeUser/uSizeOfStAnyType - 1; //get number of items in array
		FOR x := 0 TO uSizeOfArray BY 1 DO //loop through all items 
			pstIOMappingJson := a_pstIOMappingJson + uSizeOfStAnyType*x; // get array position
			sJson := pfbJsonSchema^.M_SetJsonMember(sJson,pstIOMappingJson^.name); //set json value
			pfbJsonSchema^.M_SetJsonMemberValue(sJson,'channel',pstIOMappingJson^.channel); //set json value
			pfbJsonSchema^.M_SetJsonMemberValue(sJson,'deviceNum',pstIOMappingJson^.deviceNum); //set json value
			pfbJsonSchema^.M_SetJsonMemberValue(sJson,'ethercatDeviceNum',pstIOMappingJson^.ethercatDeviceNum); //set json value
			pfbJsonSchema^.M_SetJsonMemberValue(sJson,'ioLinkDevice',pstIOMappingJson^.ioLinkDevice); //set json value
			pfbJsonSchema^.M_SetJsonMemberValue(sJson,'ioLinkSlaveChannel',pstIOMappingJson^.ioLinkSlaveChannel); //set json value
		END_FOR
		pResult^ := MPM_FBResult.E_Result.S_OK;
	ELSE
		pResult^ := MPM_FBResult.E_Result.S_FAILED;
	END_IF
//get
ELSIF bGet = TRUE THEN
	sJson := pfbJsonSchema^.FindMember(sJson,_fbName);
	IF a_pstIOMappingJson > 0 AND_THEN uAnyTypeUser > 0 AND uSizeOfStAnyType > 0 THEN //make sure all values are vaild
		uSizeOfArray := uAnyTypeUser/uSizeOfStAnyType - 1; //get number of items in array
		FOR x := 0 TO uSizeOfArray BY 1 DO //loop through all items 
			pstIOMappingJson := a_pstIOMappingJson + uSizeOfStAnyType*x; // get array position
			sJson := pfbJsonSchema^.M_SetJsonMember(sJson,pstIOMappingJson^.name); //set json value
			pfbJsonSchema^.M_GetJsonMemberValue(sJson,'channel',pstIOMappingJson^.channel); //set json value
			pfbJsonSchema^.M_GetJsonMemberValue(sJson,'deviceNum',pstIOMappingJson^.deviceNum); //set json value
			pfbJsonSchema^.M_GetJsonMemberValue(sJson,'ethercatDeviceNum',pstIOMappingJson^.ethercatDeviceNum); //set json value
			pfbJsonSchema^.M_GetJsonMemberValue(sJson,'ioLinkDevice',pstIOMappingJson^.ioLinkDevice); //set json value
			pfbJsonSchema^.M_GetJsonMemberValue(sJson,'ioLinkSlaveChannel',pstIOMappingJson^.ioLinkSlaveChannel); //set json value
		END_FOR
		pResult^ := MPM_FBResult.E_Result.S_OK;
	ELSE
		pResult^ := MPM_FBResult.E_Result.S_FAILED;
	END_IF
END_IF	
]]></ST>
      </Implementation>
    </Method>
    <Method Name="F_Map_ST_IOMappingJson" Id="{5c1ae8e3-b5c1-4247-821a-ef4678ae72df}" FolderPath="Protected\">
      <Declaration><![CDATA[METHOD PROTECTED F_Map_ST_IOMappingJson : HRESULT
VAR_INPUT
	stIOMappingJson : POINTER TO ST_IOMappingJson;
	name : STRING;
	pPVoid : POINTER TO PVOID;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[]]></ST>
      </Implementation>
    </Method>
    <Method Name="F_Recipe" Id="{23f9deca-2586-4a9d-b0ee-68078bcc9c57}">
      <Declaration><![CDATA[METHOD PUBLIC FINAL F_Recipe : HRESULT
VAR_INPUT
	lastResult : HRESULT;
	sJson : SJsonValue;
	pfbJsonSchema : POINTER TO FB_JsonSchemaEx_OLD;	
	bGet : BOOL;
END_VAR

VAR_INST
	_fbResult : FB_ResultHelper_V2;
	pResult : POINTER TO HRESULT;
END_VAR

VAR
	a_stAnyUser : POINTER TO MPM_JsonParser.ST_AnyType_User; // pointer to array of vars
	uAnyTypeUser : UDINT; //number of bytes in a_stAnyUser
	
	uSizeOfArray : UDINT;
	pstAnyUser : POINTER TO MPM_JsonParser.ST_AnyType_User; //pointer for loop
	x : UDINT;
END_VAR

VAR CONSTANT
	uSizeOfStAnyType : UDINT := SIZEOF(MPM_JsonParser.ST_AnyType_User);
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF _fbResult.M_MethodResult(F_Recipe,ADR(pResult),lastResult) = FALSE THEN
	RETURN;
END_IF


pResult^ := _F_Recipe(a_stAnyUser,uAnyTypeUser);


pResult^ := MPM_FBResult.E_Result.S_WORKING;

//set
IF bGet = FALSE THEN
	sJson := pfbJsonSchema^.M_SetJsonMember(sJson,_fbName);
	IF a_stAnyUser > 0 AND_THEN uAnyTypeUser > 0 AND uSizeOfStAnyType > 0 THEN //make sure all values are vaild
		uSizeOfArray := uAnyTypeUser/uSizeOfStAnyType - 1; //get number of items in array
		FOR x := 0 TO uSizeOfArray BY 1 DO //loop through all items 
			pstAnyUser := a_stAnyUser + uSizeOfStAnyType*x; // get array position
				pfbJsonSchema^.M_SetJsonMemberValue_AnyType(sJson,pstAnyUser^.name,pstAnyUser^); //set json value
		END_FOR
		pResult^ := MPM_FBResult.E_Result.S_OK;
	ELSE
		pResult^ := MPM_FBResult.E_Result.S_FAILED;
	END_IF
	
//get
ELSIF bGet = TRUE THEN 	
	sJson := pfbJsonSchema^.FindMember(sJson,_fbName);
	IF a_stAnyUser > 0 AND_THEN uAnyTypeUser > 0 AND uSizeOfStAnyType > 0 THEN //make sure all values are vaild
		uSizeOfArray := uAnyTypeUser/uSizeOfStAnyType - 1; //get number of items in array
		FOR x := 0 TO uSizeOfArray BY 1 DO //loop through all items 
			pstAnyUser := a_stAnyUser + uSizeOfStAnyType*x; // get array position
				pfbJsonSchema^.M_GetJsonMemberValue_AnyType(sJson,pstAnyUser^.name,pstAnyUser^); //set json value
		END_FOR
		pResult^ := MPM_FBResult.E_Result.S_OK;
	ELSE
		pResult^ := MPM_FBResult.E_Result.S_FAILED;
	END_IF
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="F_System" Id="{4f92d8d9-026e-4619-8a71-a0cfc6eb2eed}">
      <Declaration><![CDATA[METHOD PUBLIC FINAL F_System : HRESULT
VAR_INPUT
	lastResult : HRESULT;
	sJson : SJsonValue;
	pfbJsonSchema : POINTER TO FB_JsonSchemaEx_OLD;	
	bGet : BOOL;	
END_VAR

VAR_INST
	_fbResult : FB_ResultHelper_V2;
	pResult : POINTER TO HRESULT;
END_VAR

VAR
	a_stAnyUser : POINTER TO MPM_JsonParser.ST_AnyType_User; // pointer to array of vars
	uAnyTypeUser : UDINT; //number of bytes in a_stAnyUser
	
	uSizeOfArray : UDINT;
	pstAnyUser : POINTER TO MPM_JsonParser.ST_AnyType_User; //pointer for loop
	x : UDINT;
END_VAR


VAR CONSTANT
	uSizeOfStAnyType : UDINT := SIZEOF(MPM_JsonParser.ST_AnyType_User);
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF _fbResult.M_MethodResult(F_System,ADR(pResult),lastResult) = FALSE THEN
	RETURN;
END_IF


pResult^ := _F_System(a_stAnyUser,uAnyTypeUser);
//set
IF bGet = FALSE THEN
	pResult^ := MPM_FBResult.E_Result.S_WORKING;
	sJson := pfbJsonSchema^.M_SetJsonMember(sJson,_fbName);
	IF a_stAnyUser > 0 AND_THEN uAnyTypeUser > 0 AND uSizeOfStAnyType > 0 THEN //make sure all values are vaild
		uSizeOfArray := uAnyTypeUser/uSizeOfStAnyType - 1; //get number of items in array
		FOR x := 0 TO uSizeOfArray BY 1 DO //loop through all items 
			pstAnyUser := a_stAnyUser + uSizeOfStAnyType*x; // get array position
				pfbJsonSchema^.M_SetJsonMemberValue_AnyType(sJson,pstAnyUser^.name,pstAnyUser^); //set json value
		END_FOR
		pResult^ := MPM_FBResult.E_Result.S_OK;
	ELSE
		pResult^ := MPM_FBResult.E_Result.S_FAILED;
	END_IF

//get	
ELSIF bGet = TRUE THEN
	sJson := pfbJsonSchema^.FindMember(sJson,_fbName);
	IF a_stAnyUser > 0 AND_THEN uAnyTypeUser > 0 AND uSizeOfStAnyType > 0 THEN //make sure all values are vaild
		uSizeOfArray := uAnyTypeUser/uSizeOfStAnyType - 1; //get number of items in array
		FOR x := 0 TO uSizeOfArray BY 1 DO //loop through all items 
			pstAnyUser := a_stAnyUser + uSizeOfStAnyType*x; // get array position
				pfbJsonSchema^.M_GetJsonMemberValue_AnyType(sJson,pstAnyUser^.name,pstAnyUser^); //set json value
		END_FOR
		pResult^ := MPM_FBResult.E_Result.S_OK;
	ELSE
		pResult^ := MPM_FBResult.E_Result.S_FAILED;
	END_IF	
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="FB_init" Id="{39c76da8-be3f-4311-946f-56a7e0460487}">
      <Declaration><![CDATA[METHOD FB_init : BOOL
VAR_INPUT
	bInitRetains : BOOL; // if TRUE, the retain variables are initialized (warm start / cold start)
	bInCopyCode : BOOL;  // if TRUE, the instance afterwards gets moved into the copy code (online change)
	fbName : STRING;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[_fbName := fbName;]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_Events" Id="{9bfb2769-0fba-4d76-86ce-22f9c6c76e6b}">
      <Declaration><![CDATA[METHOD PUBLIC ABSTRACT M_Events : HResult
VAR_INPUT
	lastResult : HResult;
	eventID : DINT;
END_VAR
VAR_IN_OUT
	varInput : ARRAY [*] OF MPM_JsonParser.ST_AnyType_User;	//What was input		
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_Execute" Id="{c363a4a8-f039-42db-96a8-a63845351f9a}">
      <Declaration><![CDATA[METHOD PUBLIC ABSTRACT M_Execute : HRESULT
VAR_INPUT
END_VAR
VAR_INST

END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[

]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_GetEvents" Id="{78b6458e-7fc9-4d4d-a4d4-ca75768767e9}">
      <Declaration><![CDATA[METHOD PUBLIC ABSTRACT M_GetEvents : HResult
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[]]></ST>
      </Implementation>
    </Method>
    <Property Name="P_fbName" Id="{5a2b393b-8b77-4ed7-a71a-7e64119bd062}">
      <Declaration><![CDATA[PROPERTY PUBLIC P_fbName : STRING]]></Declaration>
      <Get Name="Get" Id="{831f96df-87bd-4bb9-ad06-74017936567e}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[P_fbName := _fbName;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <LineIds Name="FB_ConfigBase">
      <LineId Id="9" Count="0" />
    </LineIds>
    <LineIds Name="FB_ConfigBase._F_Axis">
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="FB_ConfigBase._F_IO">
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="FB_ConfigBase._F_Recipe">
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="FB_ConfigBase._F_System">
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="FB_ConfigBase.F_AXIS">
      <LineId Id="119" Count="6" />
      <LineId Id="168" Count="0" />
      <LineId Id="126" Count="0" />
      <LineId Id="128" Count="2" />
      <LineId Id="141" Count="0" />
      <LineId Id="137" Count="0" />
      <LineId Id="132" Count="0" />
      <LineId Id="68" Count="0" />
      <LineId Id="169" Count="0" />
      <LineId Id="173" Count="6" />
      <LineId Id="171" Count="0" />
      <LineId Id="140" Count="0" />
      <LineId Id="139" Count="0" />
    </LineIds>
    <LineIds Name="FB_ConfigBase.F_Event_ST_AnyType_Compare">
      <LineId Id="88" Count="12" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="FB_ConfigBase.F_IO">
      <LineId Id="36" Count="7" />
      <LineId Id="58" Count="0" />
      <LineId Id="124" Count="0" />
      <LineId Id="126" Count="0" />
      <LineId Id="59" Count="4" />
      <LineId Id="65" Count="0" />
      <LineId Id="95" Count="4" />
      <LineId Id="67" Count="2" />
      <LineId Id="56" Count="1" />
      <LineId Id="147" Count="0" />
      <LineId Id="127" Count="0" />
      <LineId Id="132" Count="14" />
      <LineId Id="129" Count="0" />
      <LineId Id="128" Count="0" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="FB_ConfigBase.F_Map_ST_IOMappingJson">
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="FB_ConfigBase.F_Recipe">
      <LineId Id="44" Count="0" />
      <LineId Id="52" Count="0" />
      <LineId Id="51" Count="0" />
      <LineId Id="54" Count="0" />
      <LineId Id="53" Count="0" />
      <LineId Id="5" Count="0" />
      <LineId Id="55" Count="2" />
      <LineId Id="102" Count="0" />
      <LineId Id="101" Count="0" />
      <LineId Id="83" Count="0" />
      <LineId Id="16" Count="0" />
      <LineId Id="15" Count="0" />
      <LineId Id="34" Count="2" />
      <LineId Id="41" Count="0" />
      <LineId Id="37" Count="0" />
      <LineId Id="42" Count="0" />
      <LineId Id="22" Count="0" />
      <LineId Id="24" Count="1" />
      <LineId Id="99" Count="1" />
      <LineId Id="84" Count="1" />
      <LineId Id="90" Count="8" />
      <LineId Id="89" Count="0" />
      <LineId Id="86" Count="0" />
    </LineIds>
    <LineIds Name="FB_ConfigBase.F_System">
      <LineId Id="6" Count="13" />
      <LineId Id="21" Count="0" />
      <LineId Id="23" Count="4" />
      <LineId Id="67" Count="0" />
      <LineId Id="66" Count="0" />
      <LineId Id="5" Count="0" />
      <LineId Id="56" Count="9" />
      <LineId Id="54" Count="1" />
    </LineIds>
    <LineIds Name="FB_ConfigBase.FB_init">
      <LineId Id="7" Count="0" />
    </LineIds>
    <LineIds Name="FB_ConfigBase.M_Events">
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="FB_ConfigBase.M_Execute">
      <LineId Id="33" Count="1" />
      <LineId Id="36" Count="0" />
    </LineIds>
    <LineIds Name="FB_ConfigBase.M_GetEvents">
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="FB_ConfigBase.P_fbName.Get">
      <LineId Id="2" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>