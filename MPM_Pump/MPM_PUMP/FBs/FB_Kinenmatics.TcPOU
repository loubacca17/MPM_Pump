<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.12">
  <POU Name="FB_Kinenmatics" Id="{36931c92-4ef0-4a79-87ac-58fe9245be10}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK FB_Kinenmatics
VAR_INPUT
	intialVelocity : LREAL;
	jerkLimit : LREAL;
	accelLimit : LREAL;
	decelLimit : LREAL;
	velocityLimit : LREAL;
	positionDelta : LREAL;
	timeToComplete : LREAL;
	discriment : LREAL;
END_VAR
VAR_OUTPUT
	minTime : LREAL;
	velocityOutput : LREAL;
	accelOutput : LREAL;
	jerkOutput : LREAL;
	error : BOOL;
	errorMsg : STRING;	
END_VAR
VAR
	positionMid : LREAL;
	positionQuarter : LREAL;
	//Caculating max values for a Jerk limited move
	jerkMoveAccelMax : LREAL;
	jerkMoveTimeToMaxAccel : LREAL;
	jerkMoveVelocityAtMaxAccel : LREAL;	
	jerkMoveVelocityMax : LREAL;
	jerkMoveTimeToMaxVelocity : LREAL;
	jerkMoveTimeToCompleteMin : LREAL;
	jerkMoveJerkLimitForTargetTime : LREAL;
	
	accelMoveTimeToMaxAccel : LREAL;
	accelMoveMaxVelocity : LREAL;
	accelMoveTimeForAccelConstantMove : LREAL;
	accelMoveTimeToCompleteMove : LREAL;

	accelMoveNewMaxAccel: LREAL;

	accelVelocityMoveTimeToMaxVelocity : LREAL;	
	accelVelocityMoveTimeFromMaxVelocityToMidPoint : LREAL;	
	accelVelocityTimeToCompleteMove : LREAL;
	accelSegment : ARRAY [0..6] OF LREAL;
	velocitySegment	: ARRAY [0..6] OF LREAL;
	positionSegment : ARRAY [0..6] OF LREAL;
	
	a : LREAL;
	b : LREAL;
	c : LREAL;
	


END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[IF positionDelta <= 0 OR timeToComplete <= 0 OR accelLimit <= 0 OR decelLimit <= 0 OR velocityLimit <= 0 OR jerkLimit <= 0 THEN
	RETURN;
END_IF

positionMid := positionDelta/2.0;
positionQuarter := positionDelta/4.0;

//Solve for t jerk limited equation positionMid = jerkLimit * t^3, 
//t = (positionMid/jerkLimit) ^(1/3) where t = 1/4 of the time to complete the move
jerkMoveTimeToMaxAccel := EXPT(positionMid/jerkLimit,1.0/3.0);
jerkMoveAccelMax := jerkLimit * jerkMoveTimeToMaxAccel;
jerkMoveVelocityAtMaxAccel := jerkMoveTimeToMaxAccel * jerkMoveAccelMax;
jerkMoveTimeToCompleteMin := jerkMoveTimeToMaxAccel * 4.0;

IF jerkMoveTimeToCompleteMin > timeToComplete THEN
	minTime := jerkMoveTimeToCompleteMin;
	errorMsg := 'Jerk limit too low';
	error := TRUE;			
	RETURN;
ELSE
	errorMsg := '';	
	error := FALSE;			
END_IF

IF (accelLimit < jerkMoveAccelMax) OR velocityLimit <= jerkMoveVelocityAtMaxAccel THEN
	//Caculate known values
	accelMoveTimeToMaxAccel := accelLimit/jerkLimit;
	positionSegment[0] := 1.0/6.0 * jerkLimit * EXPT(accelMoveTimeToMaxAccel,3.0);
	velocitySegment[0] := 0.5 * jerkLimit * EXPT(accelMoveTimeToMaxAccel,2.0) + intialVelocity;
	accelSegment[0] := jerkLimit*accelMoveTimeToMaxAccel;
	
	//set up quardatic formula 
	// 1/2*accelLimit*t^2 + (velocitySegment[0] + (accelLimit[0]*accelMoveTimeToMaxAccel)*t + (velocitySegment[0] * accelMoveTimeToMaxAccel)+accelSegment[0]*0.5*accelMoveTimeToMaxAccel^2
	a := 0.5 * accelSegment[0];
	b :=  velocitySegment[0] + accelSegment[0]*accelMoveTimeToMaxAccel;
	c := ((velocitySegment[0] * accelMoveTimeToMaxAccel)+accelSegment[0]*0.5*EXPT(accelMoveTimeToMaxAccel,2.0)) - positionMid;
	
	//Make sure discriment > 0 otherwise program will crash
	discriment := (EXPT(b,2.0) - 4.0 * a *c);
	IF discriment > 0 THEN
		//caculate min time
		accelMoveTimeForAccelConstantMove := (-b + EXPT(EXPT(b,2.0) -4.0 * a *c,0.5))/(2*a); //solve for quadtratic
		accelMoveTimeToCompleteMove := 2.0*(accelMoveTimeToMaxAccel * 2.0 + accelMoveTimeForAccelConstantMove); // This value is the fastest the machine can move with the accel limit
		accelMoveMaxVelocity := accelMoveTimeToCompleteMove/2*accelSegment[0]-EXPT(accelSegment[0],2.0)/jerkLimit;
		//end of caculate min time
		IF accelMoveMaxVelocity > velocityLimit THEN
			accelVelocityMoveTimeToMaxVelocity := velocityLimit/accelLimit + accelLimit/(jerkLimit);
			positionSegment[1] := velocitySegment[0]*(accelVelocityMoveTimeToMaxVelocity-2.0*accelMoveTimeToMaxAccel) + 0.5*accelLimit*EXPT((accelVelocityMoveTimeToMaxVelocity-2.0*accelMoveTimeToMaxAccel),2.0);
			velocitySegment[1] := velocitySegment[0] + accelLimit * (accelVelocityMoveTimeToMaxVelocity-2.0*accelMoveTimeToMaxAccel);
			positionSegment[2] := velocitySegment[1] * accelMoveTimeToMaxAccel +  0.5*accelLimit*EXPT((accelMoveTimeToMaxAccel),2.0) - 1.0/6.0 * jerkLimit * EXPT(accelMoveTimeToMaxAccel,3.0);
			//positionSegment[0] :=velocitySegment[0]*(accelVelocityMoveTimeToMaxVelocity-2.0*accelMoveTimeToMaxAccel);
			positionSegment[3] := positionMid - (positionSegment[0] + positionSegment[1] + positionSegment[2]);
			accelVelocityMoveTimeFromMaxVelocityToMidPoint := positionSegment[3]/velocityLimit;
			accelVelocityTimeToCompleteMove := 2.0*(accelVelocityMoveTimeToMaxVelocity + accelVelocityMoveTimeFromMaxVelocityToMidPoint);
			IF	accelVelocityTimeToCompleteMove < timeToComplete THEN
				errorMsg := '';		
				error := FALSE;						
				a := 1/jerkLimit;
				b := -(accelVelocityMoveTimeToMaxVelocity + timeToComplete - accelVelocityTimeToCompleteMove); //-timeToComplete/2.0; //
				c := velocityLimit;
				discriment := (EXPT(b,2.0) - 4.0 * a *c);
				IF discriment > 0 THEN
					minTime := accelVelocityTimeToCompleteMove;
					velocityOutput := velocityLimit;
					accelOutput := (-b - EXPT(EXPT(b,2.0) -4.0 * a *c,0.5))/(2*a);
					jerkOutput := jerkLimit; 
				END_IF	
			ELSIF accelVelocityTimeToCompleteMove > timeToComplete THEN
				minTime := accelVelocityTimeToCompleteMove;				
				errorMsg := 'velocity limit to low';	
				error := TRUE;		
				RETURN;	
			ELSIF accelVelocityTimeToCompleteMove = timeToComplete THEN
				minTime := accelVelocityTimeToCompleteMove;
				velocityOutput := velocityLimit;
				accelOutput := accelLimit;
				jerkOutput := jerkLimit; 			
			END_IF
		ELSIF accelMoveTimeToCompleteMove > timeToComplete THEN 
				minTime := accelMoveTimeToCompleteMove;			
			errorMsg := 'accel limit to low';
			error := TRUE;
			RETURN;
		ELSIF accelMoveTimeToCompleteMove < timeToComplete THEN
			minTime := accelMoveTimeToCompleteMove;
			error := FALSE;			
			errorMsg := '';	
			//Vmax = t*a-a^2/(2*j)
			//positionMid = Intergrate(Vmax) = timeToCompleteMove/(4.0 * jerkLimit)*a^2 + ((timeToCompleteMove/2)^2)/2; solve with quaddratic
			//timeToCompleteMove/(4.0 * jerkLimit)*a^2 + ((timeToCompleteMove/2)^2)/2 (*a??????) - positionMid
			a := -(timeToComplete/(4.0*jerkLimit));
			b := EXPT(timeToComplete/2.0,2.0)/2.0;
			c := -positionMid;			
			discriment := (EXPT(b,2.0) - 4.0 * a *c);
			IF discriment > 0 THEN
				accelOutput := (-b + EXPT(EXPT(b,2.0) -4.0 * a *c,0.5))/(2*a); //solve for quadtratic
			END_IF
			jerkOutput := jerkLimit;
			velocityOutput := velocityLimit;			
		ELSE
			error := FALSE;					
			errorMsg := '';	
		END_IF	
	END_IF
	//RETURN; // accel limited only
ELSIF accelLimit < jerkMoveAccelMax AND velocityLimit < jerkMoveVelocityAtMaxAccel THEN
	RETURN; // accel limited only and might be velocity limited
ELSIF accelLimit >= jerkMoveAccelMax AND velocityLimit >= jerkMoveVelocityAtMaxAccel THEN
	//jerkLimit = positionMid/(timeToComplete/4)^(3)
	minTime := jerkMoveTimeToCompleteMin;
	jerkMoveJerkLimitForTargetTime := positionMid/EXPT(timeToComplete/4,3.0);
	jerkOutput := jerkMoveJerkLimitForTargetTime;
	velocityOutput := velocityLimit;
	accelOutput := accelLimit;
	RETURN; // jerk limited
END_IF
	


// Max velocity in a jerk only limited move = positionMid = 1/2 * jerkLimit * t^2
// jerkMoveTimeToMaxVelocity := EXPT(positionMid*6/jerkLimit,1.0/3.0);
// jerkMoveVelocityMax := 1.0/2.0 * jerkLimit * EXPT(jerkMoveTimeToMaxVelocity,2);]]></ST>
    </Implementation>
    <Method Name="M_CaculateTimePosToZeroVelocity" Id="{d648a5a3-17f7-4ad2-bd1a-31e5725aad19}">
      <Declaration><![CDATA[METHOD M_CaculateTimePosToZeroVelocity : BOOL
VAR_INPUT
	intialVelocity : LREAL;
END_VAR
VAR_OUTPUT
	timeToZeroVelocity : LREAL;
	posAtZeroVelocity : LREAL;
	accelAtZero : LREAL;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF jerkLimit > 0 THEN
	timeToZeroVelocity := EXPT(intialVelocity*2.0/jerkLimit,1.0/2.0);
	posAtZeroVelocity := intialVelocity*timeToZeroVelocity + 1.0/6.0 * jerkLimit * EXPT(timeToZeroVelocity,3.0);
	accelAtZero := 1.0/2.0 * jerkLimit * EXPT(timeToZeroVelocity,2.0);
END_IF	]]></ST>
      </Implementation>
    </Method>
    <LineIds Name="FB_Kinenmatics">
      <LineId Id="619" Count="40" />
      <LineId Id="791" Count="0" />
      <LineId Id="660" Count="1" />
      <LineId Id="790" Count="0" />
      <LineId Id="662" Count="42" />
      <LineId Id="788" Count="1" />
      <LineId Id="705" Count="30" />
      <LineId Id="48" Count="0" />
    </LineIds>
    <LineIds Name="FB_Kinenmatics.M_CaculateTimePosToZeroVelocity">
      <LineId Id="11" Count="0" />
      <LineId Id="5" Count="0" />
      <LineId Id="10" Count="0" />
      <LineId Id="14" Count="0" />
      <LineId Id="12" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>